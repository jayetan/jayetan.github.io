<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jaye Tan's Octopress Blog]]></title>
  <link href="http://jayetan.github.io/atom.xml" rel="self"/>
  <link href="http://jayetan.github.io/"/>
  <updated>2014-11-19T10:37:41+08:00</updated>
  <id>http://jayetan.github.io/</id>
  <author>
    <name><![CDATA[Jaye Tan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wordpress Permalinks 404 Not Found]]></title>
    <link href="http://jayetan.github.io/blog/2014/11/19/wordpress-permalinks-404-not-found/"/>
    <updated>2014-11-19T10:16:36+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/11/19/wordpress-permalinks-404-not-found</id>
    <content type="html"><![CDATA[<p>Wordpress Permalinks 404 not found</p>

<p>This is mainly a problems for Ubuntu users after installing the Wordpress on their localhost.
to solve this problem follow this instructions:</p>

<p>Using Terminal</p>

<p>first allow overides on your apache
<code>sudo gedit /etc/apache2/apache2.conf<code>
and find all &lt;Directory /> &lt;/Directory> and paste this code in between in all of that tag
<code></p>

<pre><code>Options FollowSymLinks
AllowOverride All
Order allow,deny
Allow from all
</code></pre>

<p></code>
ex.
&lt;Directory /></p>

<pre><code>Options FollowSymLinks
AllowOverride All
Order allow,deny
Allow from all
</code></pre>

<p>&lt;/Directory></p>

<p>then go to your wordpress folder usually you can find it on /var/www/html/wordpress then create an htaccess by typing:</p>

<p><code>sudo touch .htaccess</code>
then change the access permission by typing:
<code>sudo chmod 664 /var/www/html/wordpress/.htaccess</code>
then change the ownership by typing:
<code>sudo chown www-data:www-data /var/www/html/wordpress.htaccess</code>
take note of the path you may need to change it depending on where you wordpress is installed.</p>

<p>Then change the grant access to the www folder:
<code></p>

<pre><code>sudo chmod -R 777 /var/www
sudo chown -R **yourusername** /var/www
</code></pre>

<p></code></p>

<p>then refresh the apache by:
<code>sudo service apache2 restart</code></p>

<p>you can now change your wordpress permalinks to Post name without an 404 error not found.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up and Running With Django]]></title>
    <link href="http://jayetan.github.io/blog/2014/08/15/up-and-running-with-django/"/>
    <updated>2014-08-15T22:55:06+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/08/15/up-and-running-with-django</id>
    <content type="html"><![CDATA[<p>What is Django?</p>

<p><a href="http://en.wikipedia.org/wiki/Django_(web_framework)">Django</a> is a free and open source web application framework, written in Python, which follows the model–view–controller architectural pattern.
Django&rsquo;s primary goal is to ease the creation of complex, database-driven websites. Django emphasizes reusability and &ldquo;pluggability&rdquo; of components, rapid development, and the principle of don&rsquo;t repeat yourself. Python is used throughout, even for settings, files, and data models. Django also provides an optional administrative create, read, update and delete interface that is generated dynamically through introspection and configured via admin models.</p>

<p>How to install</p>

<p>first download the tarball of django at <a href="https://www.djangoproject.com/download/">https://www.djangoproject.com/download/</a>
extract it and via terminal go to the extracted folder of django, then type</p>

<pre>
sudo python setup.py install
</pre>


<p>
if it didn&rsquo;t work you can read the README.rst which can be found at the extracted django folder and read the instruction on how to install it.</p>

<p>Listing all available commands</p>

<p>to list all available Django commands just type</p>

<pre>
django-admin.py
</pre>


<p>Creating django project</p>

<p>just type</p>

<pre>
django-admin.py startproject django_test
</pre>


<p>where in django_test is the name of your project, after installing, a folder with name django_test will be created it will also contains django files.</p>

<p>Running django server</p>

<pre>
python manage.py runserver
</pre>


<p>this will run the django server on localhost:8000, just view it on you browser and you will able to see this line &ldquo;It worked! Congratulations on your first Django-powered page.&rdquo;</p>

<p>Changing the Django default page using templates</p>

<p>in settings.py add these lines</p>

<pre>
TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, 'templates'),
)
</pre>


<p>then on urls.py add this line in the top page</p>

<pre>
from django.views.generic import TemplateView
</pre>


<p>then include this on urlpatterns inside urls.py</p>

<pre>
url(r'^$', TemplateView.as_view(template_name="index.html")),
</pre>


<p>then make a folder name templates inside your project, inside that templates folder create an index.html and add you html codes.</p>

<p>Creating an App</p>

<pre>
python manage.py startapp article
</pre>


<p>where article is the name of the app</p>

<p>Make views.py in apps use template</p>

<p>put this on top of the page to be able to pass variables and use template</p>

<pre>
from django.template.loader import get_template
from django.template import Context
</pre>


<p>then on views define a function</p>

<pre>
def article(request):
    name = "Jaye"
    template = get_template('article.html')
    html = template.render(Context({'name': name}))
    return HttpResponse(html)
</pre>


<p>The simpliest way rendering template</p>

<pre>
from django.shortcuts import render_to_response
</pre>


<p>then define a function</p>

<pre>
def article(request):
    name = "Jaye"
    return render_to_response("article.html", {"name": name})
</pre>


<p>Rendering template via class definition (can also be used in changing django default page)</p>

<p>assuming you have already imported TemplateView</p>

<pre>
class articleTemplate(TemplateView):
    template_name = "article.html"
    def get_context_data(self, **kwargs):
        context = super(articleTemplate, self).get_context_data(**kwargs)
        context["name"] = "Jaye"
        context["test"] = "Admin"
        return context
</pre>


<p>Creating template that includes external header and footer or anything you want.</p>

<p>this is usefull if you have multiple pages that has the same header and footer.</p>

<p>first we create our html files, index.html, &#95;header.html, and &#95;footer.html
now open up index.html, then use &#123;&#37; include &#37;&#125; to include the other html files</p>

<pre>
&lt;!DOCTYPE html>
&lt;html>
&lt;head>
    &lt;title>&lt;/title>
&lt;/head>
&#123;&#37; include "_header.html" &#37;&#125;
&lt;body>
    
    BODY CONTENTS HERE

&#123;&#37; include "_footer.html" &#37;&#125;
&lt;/body>
&lt;/html>
</pre>


<p>while the &#95;header and &#95;footer.html can contain any html tags except for &lt;html>&lt;/html> and &lt;body>&lt;/body></p>

<p>Enabling Django Admin</p>

<p>go to settings.py and uncomment these lines</p>

<pre>
'django.contrib.admin',
'django.contrib.auth',
</pre>


<p>and</p>

<p>go to urls.py and uncomment these lines</p>

<pre>
from django.contrib import admin
admin.autodiscover()
url(r'^admin/', include(admin.site.urls)),
</pre>


<p>after this you will now able to log in the admin page of django <a href="http://localhost:8000/admin">http://localhost:8000/admin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detect Mobile - Tablet Orientation Using Jquery]]></title>
    <link href="http://jayetan.github.io/blog/2014/08/01/detect-mobile-tablet-orientation-using-jquery/"/>
    <updated>2014-08-01T22:34:42+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/08/01/detect-mobile-tablet-orientation-using-jquery</id>
    <content type="html"><![CDATA[<p>This Javascript / Jquery code can detect mobile or tablet orientation.</p>

<pre>
    window.addEventListener("orientationchange", function() {
        var orientation = window.orientation;
      }, false);
</pre>


<p>a portrait orientation will result of a value of &ldquo;0&rdquo; while landscape orientation will yield a result of &ldquo;90&rdquo; you can now use this value to create a conditional statements, this is helpful if you are creating a realtime orientation query.</p>

<p><small>tags: javascript mobile orientation, javascript tablet orientation, device orientation jquery, jquery window orientation</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Python]]></title>
    <link href="http://jayetan.github.io/blog/2014/06/30/learning-python/"/>
    <updated>2014-06-30T21:12:58+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/06/30/learning-python</id>
    <content type="html"><![CDATA[<p>What is Python?</p>

<p>Python is a modern object-oriented programming language that&rsquo;s well-suited for a variety of uses, from simple scripts to complex web applications. Using third-party tools, such as Py2exe or Pyinstaller, Python code can be packaged into standalone executable programs.</p>

<p>This Blog will be updated during my free time to share all the knowledge I learned in studing this powerful programming language.</p>

<p>Before we start make sure that you have the python installed in your computer, If you are using linux or mac chances are that you already have python preinstalled in your computer.</p>

<p>In this blog I&rsquo;ll be using python 3, and sublime as my text editor. you can use what ever text editor you like such as eclipse to help you in you coding and compiling in one development application, but I prefer the traditional way of doing it using a separate text editor and command line it running python.</p>

<p>I will be starting this blog by creating the traditional hello world program.</p>

<pre>
#!/usr/bin/python3
print("Hello, World!")
</pre>


<p>to run python, save the file first with .py extension ex. helloWorld.py then you should compile it by typing in the terminal <code>cat helloWorld.py</code> then to run the program type in <code>./helloWorld.py</code> if you got an Permission denied error type <code>chmod 755 helloWorld.py</code> to make it executable.</p>

<p>looking in the helloWorld.py the line <code>#!/usr/bin/python3</code> is called shebang line, in unix based operating system such as linux and mackintosh, this is the path to the python interpreter which tells the computer to use it to run the program.
while the <code>print(&ldquo;Hello, World&rdquo;)</code> is use to display the a text.</p>

<p>Assigning Values</p>

<pre>
a, b = 1, 2
</pre>


<p>1 will be assigned in &ldquo;a&rdquo;, and 2 will be assigned in &ldquo;b&rdquo;, so &ldquo;a&rdquo; will hold the value of 1 and &ldquo;b&rdquo; will hold the value of 2.</p>

<p>Conditional Statement</p>

<pre>
a, b = 1, 2

if a < b:
    print("a ({}) is less than b ({})".format(a, b))
else:
    print("a ({}) is not less than b ({})".format(a, b))
</pre>


<p>In creating conditional statement in python, you type the condition followed by colon then the indented code, this is how you create a block of codes in python, blocks are called &ldquo;suites&rdquo; in python. you can see this kind of syntax in loops, functions and classes. If you notice the curly braces inside the print statement, it will be replaced by the value inside the format. This format is a method of string object.</p>

<p>Conditional Expression</p>

<pre>
a, b = 1, 2

print("foo" if a < b else "bar")
</pre>


<p>This is the other way of creating conditionals in python</p>

<p>Working with loops
There are two kinds of loops in python, the while loop and for loop.</p>

<p>While Loop</p>

<pre>
b = 1
while b < 50:
    print(b)
    b += 1
</pre>


<p>In creating while loop we type while followed by the condition then a colon, then underneath it we place the code we want to be done in this case print the value of b then followed by the incrementing value, in python the is no &ldquo;++&rdquo; e.g &ldquo;b++&rdquo; to increment the value by one, instead we can use &ldquo;+=&rdquo; sign to increment a value. In this example the print(b) will continue to execute until it reach 50, if we run the program we will see numbers 1 to 49, it will shows only up to 49 since the the increment happens after the print().</p>

<p>For Loop</p>

<pre>
fruits = ['banana', 'apple',  'mango']
for fruit in fruits:
    print('Current fruit :', fruit)
</pre>


<p>For loop works with iterator when the loop runs, it goes to each list inside the fruits variable and put it on the fruit variable one by one for each loop, it breaks out if it has no longer has a list to print.</p>

<p>Function</p>

<pre>
def loopValue(n):
    for num in range(1, n):
        print(num)

loopValue(20)
loopValue(30)
</pre>


<p>def is the keyword that we are defining a function and loopValue is the name of the function,
a function can hold multiple parameter separated by commas, in this example (n) this holds the value that has been passed by calling the function &ldquo;loopValue(20), loopValue(20)&rdquo; this is a great way to reuse code preventing you to type them repeatedly.</p>

<p>&lt;&mdash; TO BE CONTINUED &mdash;></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Multiple Github Account]]></title>
    <link href="http://jayetan.github.io/blog/2014/05/13/creating-multiple-github-account/"/>
    <updated>2014-05-13T14:36:52+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/05/13/creating-multiple-github-account</id>
    <content type="html"><![CDATA[<p>Creating Multiple Github Account on a Single Machine<br />
(don&rsquo;t change your default github if you have octopress site in your personal github)</p>

<p>In case you already have a personal Github account and want to create a new one for your projects or your client on a single machine (computer) follow this easy steps.</p>

<p>Create a new ssh key by typing in the terminal
<code>ssh-keygen -t rsa -C &ldquo;email address&rdquo;</code>
a prompt will show asking where to save the generated key, be carefull not to overwrite your existing key, just save it as ex. <code>~/.ssh/id_rsa_clientName</code></p>

<p>Then go to ~/.ssh using terminal, type <code>gedit id_rsa_clientName.pub</code> then copy the whole line then login your new github account, go to settings-account settings-ssh key click Add SSH key, give your ssh key a title and then paste your ssh key.</p>

<p>next thing you want to do is to identify the new ssh key by typing <code>ssh-add ~/.ssh/id_rsa_clientName</code> this will allow you to sign in to your github account using the new ssh key, it also tells the git which key should it use to access your github account, this will also fixed the error: Agent admitted failure to sign using the ssh key.</p>

<p>assuming your still on the .ssh folder, create a config file by typing <code>touch config</code> then type in <code>gedit config</code> then paste this line of text</p>

<pre>
#Default GitHub
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa

Host github-clientName
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_clientName
</pre>


<p>this is where we will specify the new github hostname notice the &ldquo;Host github.com&rdquo; that is our default github while the &ldquo;Host github-clientName&rdquo; is our new github account.</p>

<p>after this we can now push to our new github account, but we need first to create a new repository and copy the git repository url ex. <code>git@github.com:clientName/projectName.git</code> we will be copying only the &ldquo;clientName/projectName.git&rdquo; because we will specify the git remote origin by typing <code>git remote add origin github-clientName:clientName/projectName.git</code>
(this is also applicable if you are pulling/cloning an existing repository)</p>

<p>Note: As I stated above if you wish to have an multiple github account but already have an personal github account with octopress in it, you should not make that as your secondary github account, you will able to push to source but you cannot use &ldquo;rake deploy&rdquo; to push a new blog.</p>

<p>If this error shows up:<pre>
ERROR: Repository not found.
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.
</pre>
you need to type this on the terminal <code>ssh-add ~/.ssh/id_rsa_clientName</code><br />
<small>tags: octopress rake deploy error on multiple github accounts, github multiple accounts, Agent admitted failure to sign using the ssh key</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Drupal Locally]]></title>
    <link href="http://jayetan.github.io/blog/2014/05/07/installing-drupal-locally/"/>
    <updated>2014-05-07T11:39:26+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/05/07/installing-drupal-locally</id>
    <content type="html"><![CDATA[<p>Installing Drupal on Localhost</p>

<p>In order to run Drupal locally we must have a Server that runs Apache, Php and MySQL,
for windows you can install software bundle called wamp
for mac you can use mamp
and for linux you can install lamp, but I recommend to install it individually, in my experience as a linux user installing a bundle package will cause you a lot of errors rather than installing it individually.</p>

<p>Installing Apache, PHP MySQL and PHPmyadmin for LINUX</p>

<p>Open terminal and type in these commands:</p>

<p>APACHE</p>

<p><code>sudo apt-get update</code>
<code>sudo apt-get install apache2</code>
to test if the apache is working browse <code><a href="http://localhost">http://localhost</a></code></p>

<p>MySQL
<code>sudo apt-get install mysql-server libapache2-mod-auth-mysql php5-mysql</code>
<code>sudo mysql_install_db</code>
<code>sudo /usr/bin/mysql_secure_installation</code>
prompt will appear asking for current password for root</p>

<pre>Enter current password for root (enter for none): 
OK, successfully used password, moving on...</pre>


<p>for testing purposes I would recommend to not put password for root,
a bunch of promt questions will follow along installation just type y to all.</p>

<p>PHP</p>

<p><code>sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt</code></p>

<p>PHPmyadmin</p>

<p><code>sudo apt-get install phpmyadmin</code></p>

<p>after you installed the Apache MySQL PHP and PHPmyadmin</p>

<p>download the drupal at <code><a href="https://drupal.org/download">https://drupal.org/download</a></code>
choose the .zip format and unzipped it after download to see the drupal folder
use the terminal to move the drupal folder to var/www by typing <code>sudo mv Downloads/Drupal-7.27 /var/www</code></p>

<p>Note: You may need to grant access to your /var/www folder to do this simply type the following:</p>

<pre>
sudo chmod -R 777 /var/www
sudo chown -R **yourusername** /var/www
</pre>


<p>Next thing you must do is to setup the database for your drupal, browse <a href="http://localhost/phpmyadmin">http://localhost/phpmyadmin</a>
and create a database for your drupal.</p>

<p>then browse <a href="http://localhost/drupal">http://localhost/drupal</a> folder name ex. <a href="http://localhost/drupal-7.27">http://localhost/drupal-7.27</a> this will take you to the installation, just follow the instruction and you wil be able to install drupal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Grails App]]></title>
    <link href="http://jayetan.github.io/blog/2014/05/06/creating-grails-app/"/>
    <updated>2014-05-06T11:52:43+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/05/06/creating-grails-app</id>
    <content type="html"><![CDATA[<p>Creating Grails App</p>

<p>Before we can create an Grails application, we need to install Java Development kit in our computer by typing
<code>sudo apt-get install oracle-java6-installer</code>
(this will also fixed the JAVA_HOME was NOT set error in your terminal, if you have installed the GVM first.)</p>

<p>after installation we can now create our grails application by typing
<code>grails create-app name</code> ex. <code>grails create-app sampleProject</code></p>

<p>then <code>cd sampleProject</code> then to run the grails project simply type <code>grails run-app</code>
then browse to <code><a href="http://localhost:8080/sampleProject/">http://localhost:8080/sampleProject/</a></code>
you will now able to see your first grails app.</p>

<p>Configuring Database to use mySQL as default Database</p>

<p>By default Grails uses H2 as its database but we can change this by simply going to your Grails Project then open <code>grails-app/conf/</code> directory then open <code>DataSource.groovy</code></p>

<p>change</p>

<pre>
dataSource {
    pooled = true
    driverClassName = "org.h2.Driver"
    username = "sa"
    password = ""
}
</pre>


<p>to</p>

<pre>
dataSource {
    pooled = true
    driverClassName = "com.mysql.jdbc.Driver"
    username = "root"
    password = ""
}
</pre>


<p>and change all</p>

<pre>
dbCreate = "update"
url = "jdbc:h2:mem:testDb;MVCC=TRUE;LOCK_TIMEOUT=10000"
</pre>


<p>to</p>

<pre>
dbCreate = "update"
url = "jdbc:mysql://localhost/testing"
</pre>


<p>Then open <code>BuildConfig.groovy</code> find and uncomment the line <code>runtime &lsquo;mysql:mysql-connector-java:5.1.16&rsquo;</code></p>

<p><small>
NOTE: dbCreate dictates what grails will do to the database, these are the following definition you can use:</p>

<p>create-drop &ndash; Drop and re-create the database when Grails is run<br />
create &ndash; Create the database if it doesn&rsquo;t exist, but don&rsquo;t modify it if it does. Deletes existing data.<br />
update &ndash; Create the database if it doesn&rsquo;t exist, and modify it if it does exist</p>

<p><code>-Both create-drop and create will destroy all existing data-</code>
</small></p>

<p>MVC Model View Controll</p>

<p>Grails uses MVC architecture pattern to implement user interface</p>

<p>Syntax in creating Domain (Model)</p>

<p><code>grails create-domain-class className</code> ex. <code>grails create-domain-class book</code></p>

<p>Syntax in creating Controller</p>

<p><code>grails create-controller controllerName</code> ex. <code>grails create-controller bookController</code></p>

<p>For creating the View</p>

<p>we could simply create a file with .gsp extension name inside the &ldquo;projectName&rdquo;/Grails-app/views directory
ex. <code>books.gsp</code></p>

<p>Basic Grails/Groovy Syntax</p>

<p>just like html tags grails uses opening and closing tags</p>

<p>example of grails form</p>

<pre>
&#60;g:form controller="Persons" action="save" class="grails-form">
            &#60;label>First Name: </label>
            &#60;g:textField name="firstName"/><br/>

            &#60;label>Last Name: </label>
            &#60;g:textField name="lastName"/><br/>

            &#60;label>Age: </label>
            &#60;g:textField name="age"/><br/>

            &#60;g:actionSubmit value="Save"/>
&#60;/g:form>
</pre>


<p>example of grails input field
<code>&lt;g:textField name=&ldquo;lastName&rdquo;/></code></p>

<p>example of grails submit button
<code>&lt;g:actionSubmit value=&ldquo;Save&rdquo;/></code></p>

<p>example of looping data to display database content</p>

<pre>
    &#60;table border="1">
        &#60;g:each in="${viewRecords}" status="i" var="thisRecord">
            &#60;tr>
                &#60;td>${thisRecord.id}</td>
                &#60;td>${thisRecord.firstName}</td>
                &#60;td>${thisRecord.lastName}</td>
                &#60;td>${thisRecord.age}</td>
            &#60;/tr>
        &#60;/g:each>
    &#60;/table>
</pre>


<p>Basic Controller Functions</p>

<p>Inserting Data to MySQL Database</p>

<pre>
    def save() {
        def users = new Persons(params)
        users.save()
        render "Success!"
        redirect(action:"view")
    }
</pre>


<p>Pulling data from MySql database</p>

<pre>
    def view = {
        def viewUsers = Persons.list();
        [viewRecords: viewUsers];
    }
</pre>


<p>Deleteing data from MySql database with if else statement</p>

<pre>
    def delete = {
        def deleteUser = Persons.get(params.idNum)

        if(!deleteUser){
            render "User Id don't exist!"
        }else{
            deleteUser.delete()
            render "Deleted!"
        }
        
    }
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing GVM]]></title>
    <link href="http://jayetan.github.io/blog/2014/05/06/installing-gvm/"/>
    <updated>2014-05-06T10:06:53+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/05/06/installing-gvm</id>
    <content type="html"><![CDATA[<p>Installing GVM (Grails Version Manager)</p>

<p>To install GVM we need to install Curl first via terminal <code>sudo apt-get install curl</code>
then we could follow the instructions in the <code><a href="http://gvmtool.net/">http://gvmtool.net/</a></code></p>

<p><code>curl -s get.gvmtool.net | bash</code></p>

<p>after the GVM is installed type this in the terminal <code>gvm help</code>
we should see the list of candidates:
<code>candidate  :  gaiden, gradle, grails, griffon, groovy, groovyserv, lazybones, springboot, vertx</code>
if you are not able to see the candidates list you need to uninstall the GVM and install it again</p>

<p>how to uninstall GVM</p>

<p>we need to delete this <code>#THIS MUST BE AT THE END OF THE FILE FOR GVM TO WORK!!!
[[ -s &ldquo;~/.gvm/bin/gvm-init.sh&rdquo; &amp;&amp; ! $(which gvm-init.sh) ]] &amp;&amp; source &ldquo;~/.gvm/bin/gvm-init.sh&rdquo;</code> lines in the</p>

<p><code>~/.bash_profile (or ~/.profile)</code>
<code>~/.bashrc</code>
and
<code>~/.zshrc</code></p>

<p>just use your text editor to open the file and delete it ex. <code>sudo gedit ~/.bash_profile</code>
then delete the <code>~/.gvm</code> directory <code>rm -rf ~/.gvm</code></p>

<p>if your GVM installed properly you can now install Grails by typing
<code>gvm install grails [version]</code> ex. <code>gvm install grails 2.1.1</code>
to see the list of available grails type <code>gvm list grails</code>
if you see a note saying that your gvm is in offline mode just put it online by typing <code>gvm offline disable</code></p>

<p><small>NOTE: you might think that the code I posted above is not working due to constant errors that you will receive, this is normal, I repeat the steps above numerous times before it installed perfectly, especially in installing the grails, you have to put you gvm in online mode repeatedly because it automatically turns offline when installation fails.</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallax Scrolling]]></title>
    <link href="http://jayetan.github.io/blog/2014/04/07/parallax-scrolling/"/>
    <updated>2014-04-07T18:27:59+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/04/07/parallax-scrolling</id>
    <content type="html"><![CDATA[<p>Today I created a Simple Parallax Scrolling that scrolls different elements with different speed upwards, at first it looks intimidating but its simple to create probably the most challenging part of the parallax is how you can make it scroll smoothly, but you can achieve it by using some plug-ins
These are the part of my codes:</p>

<p>Html</p>

<pre>
&#60;div class="small-clouds-layer">
    &#60;img src="blue-clouds-1.png" class="small-1">
    &#60;img src="blue-clouds-3.png" class="small-3">
&#60;/div>
</pre>


<p>Css</p>

<pre>
.small-clouds-layer{
    position: absolute;
    top: 600px;
    width: 100%;
}
.small-1{
    margin-left: 300px;
}
.small-3{
    margin-left: 300px;
}
</pre>


<p>Javascript</p>

<pre>
$(window).bind('scroll',function(e){
    parallaxScroll();
});

function parallaxScroll(){
    var scrolled = $(window).scrollTop();
    $('.small-clouds-layer').css('top',(600-(scrolled*.5))+'px');
}
</pre>


<p>the javascript code above is enough to make a parallax scrolling if you want to animate more elements just set it&rsquo;s css rules and add that elements inside parallaxScroll function</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Index]]></title>
    <link href="http://jayetan.github.io/blog/2014/04/04/google-index/"/>
    <updated>2014-04-04T18:28:48+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/04/04/google-index</id>
    <content type="html"><![CDATA[<p>After making some blogs, I searched for Boinx and Bryan&rsquo;s blogs to see if Google already indexed their site by typing in the browser <code>site:<a href="http://urlOfTheSite">http://urlOfTheSite</a></code> since I&rsquo;m thinking their site is already running since Dec. 2013 it should be indexed by now, but Google bots doesn&rsquo;t able to pick thier site. so I linked their sites to my Octopress site and submitted my site to Google Index via Google Webmaster tools <code><a href="https://www.google.com/webmasters/"><a href="https://www.google.com/webmasters/">https://www.google.com/webmasters/</a></a></code> afterward I have to download the html verification file and uploaded it to my site server and click the verify button. after an hour I checked again my site and my friend&rsquo;s site and now its already indexed by Google, hoping it will gain some rankings after some time for a chance to be read by other viewers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Static Punch Web Page]]></title>
    <link href="http://jayetan.github.io/blog/2014/04/04/creating-static-punch-webpage/"/>
    <updated>2014-04-04T18:17:11+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/04/04/creating-static-punch-webpage</id>
    <content type="html"><![CDATA[<p>Installation</p>

<p>Download and install Node.js: <a href="http://nodejs.org/#download"><a href="http://nodejs.org/#download">http://nodejs.org/#download</a></a>
Using terminal, enter the following command:</p>

<pre><code>sudo npm install -g punch</code></pre>


<p>After the installation, create your folder by typing:</p>

<pre><code>punch setup myFolderName</code></pre>


<p>Go to the myFolderName/default directory and start the server by typing:</p>

<pre><code>punch s</code></pre>


<p>then open your browser and visit: <a href="http://localhost:9009"><a href="http://localhost:9009">http://localhost:9009</a></a></p>

<p>You will now see the Punch tutorial on how to add and edit your webpage. just follow the instruction and you&rsquo;ll be able to
create your first webpage easily</p>

<hr />


<p>Punch Structure (Folders and files)</p>

<p>config.json &ndash;> this is where you can configure your punch settings.</p>

<p>templates &ndash;> this where you can find the .mustache files by default is has three .mustache files:</p>

<pre><code>_layout.mustache
_header.mustahce
_footer.mustache
</code></pre>


<p>you can add more if needed. here are the basic tag to include the .mustache file in one mustache file.</p>

<pre><code>
    &#123;&#123;&#62; header &#125&#125
    &#123;&#123;&#62; home &#125&#125
    &#123;&#123;&#62; footer &#125&#125</code>
</pre>


<p>this is where you can also controll your site appearance and all your assets should be place ex. css folder, images, javascript.</p>

<p>output &ndash;> all the output html files, assets,images, javascript resides here you cannot modify these files since it is automatically generated.</p>

<p>contents &ndash;> this is where you can add contents/pages to your sites to add just create a folder name with underscore first then the name ex. _about then inside this folder create an intro.markdown file then type or paste your contents inside it.
you can also add contents to your site by using the shared.json file open it and add your contents ex.</p>

<pre><code>"navbar": [
        { "label": "HOME", "href": "/" },
        { "label": "ABOUT", "href": "/about" }]</code>
</pre>


<p>and to include this just open your .mustache file in templates directory and use this ex. code</p>

<pre><code>
    &#60;nav>
        &#60;ul>
            &#123;&#123;#navbar}}
                &#60;li>&#60;a class="navLinks" href="&#123;&#123;{href}}}">&#60;/a>&#60;/li>
            &#123;&#123;/navbar}}
        &#60;/ul>
    &#60;/nav>
</code></pre>


<p>this will create an navigation links to your site.</p>

<hr />


<p>Problems Encountered(Ubuntu)</p>

<p>If you follow the punch installation guide these are the possible errors you may encounter</p>

<p>Installation &ndash;>  you will receive an error using this command <code>npm install -g punch</code>
The solution, use <code>sudo npm install -g punch</code></p>

<p>Running punch server &ndash;> if you follow the instruction <code>Go to the mysite directory and start the server: cd mysite; punch s</code> the punch server won&rsquo;t run.
The solution, access the default folder where you can find the config.json and run <code>punch s</code> in the terminal</p>

<p>Contents Rendering &lt;&ndash; if you paste a big chunck of html codes in your intro.markdown it will be generated by punch as a plain text in the output.
The solution, use the tag with three parentheses to get the unescaped output (&#123;&#123;&#123;intro}}} instead of &#123;&#123;intro}}) or try to paste smaller pieces of html codes and refresh your browser each time.</p>

<p><small>tags: ubuntu punch install, punch s error, punch render problem, ubuntu punch laktek error, punch error solutions, punch displays as plain text </small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Jekyll Static Webpage]]></title>
    <link href="http://jayetan.github.io/blog/2014/04/02/creating-jekyll-static-webpage/"/>
    <updated>2014-04-02T18:10:38+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/04/02/creating-jekyll-static-webpage</id>
    <content type="html"><![CDATA[<p>How to create Jekyll Static Webpage</p>

<p>First we have to install the jekyll gem by typing in the terminal
<code>gem install jekyll</code>
then we have to create a new folder which the jekyll will generate all the needed files and folder by typing in the terminal <code>jekyll new my-folder-name</code>
then you can access the folder by typing <code>cd my-folder-name</code> then <code>ls</code> to see all the generated files and folders</p>

<p>_includes &ndash;> this is where you will put your reusable html file (parts of your html codes)</p>

<p>_layouts &ndash;> this is where you can find the default.html which will be called by the index.html (can be found at the root folder.)</p>

<p>_post &ndash;> this where you can find all of your created blogs</p>

<p><em>_site &ndash;> this is where you can find the generated html file which are rendered by the browser , all the contents inside here should be generated by the jekyll. To add a page inside </em>site folder we should create an html page in the root folder manually, so if we want to create contact.html it should be placed in the root folder of my-folder-name then open the contact.html and before the
<code>
html code block we should put
&#8209;&#8209;&#8209;
layout: contact
&#8209;&#8209;&#8209;
</code></p>

<p>then on the terminal type <code>jekyll build &mdash;watch</code> this will now create contact.html in the <em>site folder and any changes will automatically update the </em>site folder and to add folder in <em>site folder same rules applies the folder should be placed at the root folder, lets say we want to create css folder it should be place in the root folder since the jekyll is running it should create the css folder in the </em>site folder if not you can type in the terminal <code>jekyll build</code></p>

<p>INCLUDING REUSABLE HTML CODES</p>

<p>All the includes file should be placed in the _includes to be accessible and to include this file we can add inside our html file the code <code>&#123;&#37;include &ldquo;name of the file&rdquo; param=&ldquo;value&rdquo; &#37;&#125; ex. &#123;&#37; include footer.html param=&ldquo;value&rdquo; &#37;&#125;</code></p>

<p>To run the webpage locally just type <code>jekyll serve or jekyll serve &mdash;watch</code> then browse to <a href="http://localhost:4000"><a href="http://localhost:4000">http://localhost:4000</a></a></p>

<p>example of the webpage I built using jekyll <a href="http://jayetan.github.io/business-sample/"><a href="http://jayetan.github.io/business-sample/">http://jayetan.github.io/business-sample/</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Finished Setting Up My Octopress Blog]]></title>
    <link href="http://jayetan.github.io/blog/2014/03/27/just-finished-setting-up-my-octopress-blog/"/>
    <updated>2014-03-27T18:05:51+08:00</updated>
    <id>http://jayetan.github.io/blog/2014/03/27/just-finished-setting-up-my-octopress-blog</id>
    <content type="html"><![CDATA[<p>Adding this page content was not really easy for me probably because I really don&rsquo;t read the documentation, I was relying on experimentationand testing, I thought pushing new contents was same as in github using
<code>git add. git commit and git push</code> Octopress is different you have to use <code>rake generate and rake deploy</code> to update your contents.
Sometime this week I&rsquo;ll be adding more pages for my blogs about what I have learned from this wonderfull company from the day I start training, I couldn&rsquo;t really remember when is the day I started but its before Feb. 26 so I could say that I&rsquo;ve training for one month now and so far it really helps me to learn the things I need to learn.</p>
]]></content>
  </entry>
  
</feed>
